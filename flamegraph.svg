<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_kernel.dylib`__exit (1 samples, 3.85%)</title><rect x="0.0000%" y="613" width="3.8462%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="623.50">libs..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by (1 samples, 3.85%)</title><rect x="3.8462%" y="389" width="3.8462%" height="15" fill="rgb(217,0,24)"/><text x="4.0962%" y="399.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::merge_sort (1 samples, 3.85%)</title><rect x="3.8462%" y="373" width="3.8462%" height="15" fill="rgb(221,193,54)"/><text x="4.0962%" y="383.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::insert_head (1 samples, 3.85%)</title><rect x="3.8462%" y="357" width="3.8462%" height="15" fill="rgb(248,212,6)"/><text x="4.0962%" y="367.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1 samples, 3.85%)</title><rect x="3.8462%" y="341" width="3.8462%" height="15" fill="rgb(208,68,35)"/><text x="4.0962%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta::_{{closure}} (1 samples, 3.85%)</title><rect x="3.8462%" y="325" width="3.8462%" height="15" fill="rgb(232,128,0)"/><text x="4.0962%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::sort_by_score (1 samples, 3.85%)</title><rect x="3.8462%" y="309" width="3.8462%" height="15" fill="rgb(207,160,47)"/><text x="4.0962%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 3.85%)</title><rect x="3.8462%" y="293" width="3.8462%" height="15" fill="rgb(228,23,34)"/><text x="4.0962%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 3.85%)</title><rect x="3.8462%" y="277" width="3.8462%" height="15" fill="rgb(218,30,26)"/><text x="4.0962%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 3.85%)</title><rect x="3.8462%" y="261" width="3.8462%" height="15" fill="rgb(220,122,19)"/><text x="4.0962%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (1 samples, 3.85%)</title><rect x="3.8462%" y="245" width="3.8462%" height="15" fill="rgb(250,228,42)"/><text x="4.0962%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="3.8462%" y="229" width="3.8462%" height="15" fill="rgb(240,193,28)"/><text x="4.0962%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="3.8462%" y="213" width="3.8462%" height="15" fill="rgb(216,20,37)"/><text x="4.0962%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="3.8462%" y="197" width="3.8462%" height="15" fill="rgb(206,188,39)"/><text x="4.0962%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 3.85%)</title><rect x="3.8462%" y="181" width="3.8462%" height="15" fill="rgb(217,207,13)"/><text x="4.0962%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 3.85%)</title><rect x="3.8462%" y="165" width="3.8462%" height="15" fill="rgb(231,73,38)"/><text x="4.0962%" y="175.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by (1 samples, 3.85%)</title><rect x="7.6923%" y="373" width="3.8462%" height="15" fill="rgb(225,20,46)"/><text x="7.9423%" y="383.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::merge_sort (1 samples, 3.85%)</title><rect x="7.6923%" y="357" width="3.8462%" height="15" fill="rgb(210,31,41)"/><text x="7.9423%" y="367.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::insert_head (1 samples, 3.85%)</title><rect x="7.6923%" y="341" width="3.8462%" height="15" fill="rgb(221,200,47)"/><text x="7.9423%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1 samples, 3.85%)</title><rect x="7.6923%" y="325" width="3.8462%" height="15" fill="rgb(226,26,5)"/><text x="7.9423%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta::_{{closure}} (1 samples, 3.85%)</title><rect x="7.6923%" y="309" width="3.8462%" height="15" fill="rgb(249,33,26)"/><text x="7.9423%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::sort_by_score (1 samples, 3.85%)</title><rect x="7.6923%" y="293" width="3.8462%" height="15" fill="rgb(235,183,28)"/><text x="7.9423%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 3.85%)</title><rect x="7.6923%" y="277" width="3.8462%" height="15" fill="rgb(221,5,38)"/><text x="7.9423%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 3.85%)</title><rect x="7.6923%" y="261" width="3.8462%" height="15" fill="rgb(247,18,42)"/><text x="7.9423%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 3.85%)</title><rect x="7.6923%" y="245" width="3.8462%" height="15" fill="rgb(241,131,45)"/><text x="7.9423%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (1 samples, 3.85%)</title><rect x="7.6923%" y="229" width="3.8462%" height="15" fill="rgb(249,31,29)"/><text x="7.9423%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="7.6923%" y="213" width="3.8462%" height="15" fill="rgb(225,111,53)"/><text x="7.9423%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (1 samples, 3.85%)</title><rect x="11.5385%" y="213" width="3.8462%" height="15" fill="rgb(238,160,17)"/><text x="11.7885%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;tictactoe::board::Board as core::hash::Hash&gt;::hash (1 samples, 3.85%)</title><rect x="11.5385%" y="197" width="3.8462%" height="15" fill="rgb(214,148,48)"/><text x="11.7885%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;tictactoe::agentid::AgentId as core::hash::Hash&gt;::hash (1 samples, 3.85%)</title><rect x="11.5385%" y="181" width="3.8462%" height="15" fill="rgb(232,36,49)"/><text x="11.7885%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::hash::impls::_&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 3.85%)</title><rect x="11.5385%" y="165" width="3.8462%" height="15" fill="rgb(209,103,24)"/><text x="11.7885%" y="175.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::hash::Hasher::write_isize (1 samples, 3.85%)</title><rect x="11.5385%" y="149" width="3.8462%" height="15" fill="rgb(229,88,8)"/><text x="11.7885%" y="159.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::hash::Hasher::write_usize (1 samples, 3.85%)</title><rect x="11.5385%" y="133" width="3.8462%" height="15" fill="rgb(213,181,19)"/><text x="11.7885%" y="143.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 3.85%)</title><rect x="11.5385%" y="117" width="3.8462%" height="15" fill="rgb(254,191,54)"/><text x="11.7885%" y="127.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 3.85%)</title><rect x="11.5385%" y="101" width="3.8462%" height="15" fill="rgb(241,83,37)"/><text x="11.7885%" y="111.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 3.85%)</title><rect x="11.5385%" y="85" width="3.8462%" height="15" fill="rgb(233,36,39)"/><text x="11.7885%" y="95.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::cmp::min (1 samples, 3.85%)</title><rect x="11.5385%" y="69" width="3.8462%" height="15" fill="rgb(226,3,54)"/><text x="11.7885%" y="79.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::cmp::Ord::min (1 samples, 3.85%)</title><rect x="11.5385%" y="53" width="3.8462%" height="15" fill="rgb(245,192,40)"/><text x="11.7885%" y="63.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::ops::function::FnOnce::call_once (1 samples, 3.85%)</title><rect x="11.5385%" y="37" width="3.8462%" height="15" fill="rgb(238,167,29)"/><text x="11.7885%" y="47.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 3.85%)</title><rect x="15.3846%" y="181" width="3.8462%" height="15" fill="rgb(232,182,51)"/><text x="15.6346%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by (3 samples, 11.54%)</title><rect x="11.5385%" y="357" width="11.5385%" height="15" fill="rgb(231,60,39)"/><text x="11.7885%" y="367.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::merge_sort (3 samples, 11.54%)</title><rect x="11.5385%" y="341" width="11.5385%" height="15" fill="rgb(208,69,12)"/><text x="11.7885%" y="351.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::insert_head (3 samples, 11.54%)</title><rect x="11.5385%" y="325" width="11.5385%" height="15" fill="rgb(235,93,37)"/><text x="11.7885%" y="335.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3 samples, 11.54%)</title><rect x="11.5385%" y="309" width="11.5385%" height="15" fill="rgb(213,116,39)"/><text x="11.7885%" y="319.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta::_{{closure}} (3 samples, 11.54%)</title><rect x="11.5385%" y="293" width="11.5385%" height="15" fill="rgb(222,207,29)"/><text x="11.7885%" y="303.50">ttt_ab_vs_ab`gts:..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::sort_by_score (3 samples, 11.54%)</title><rect x="11.5385%" y="277" width="11.5385%" height="15" fill="rgb(206,96,30)"/><text x="11.7885%" y="287.50">ttt_ab_vs_ab`gts:..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 11.54%)</title><rect x="11.5385%" y="261" width="11.5385%" height="15" fill="rgb(218,138,4)"/><text x="11.7885%" y="271.50">ttt_ab_vs_ab`std:..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (3 samples, 11.54%)</title><rect x="11.5385%" y="245" width="11.5385%" height="15" fill="rgb(250,191,14)"/><text x="11.7885%" y="255.50">ttt_ab_vs_ab`hash..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (3 samples, 11.54%)</title><rect x="11.5385%" y="229" width="11.5385%" height="15" fill="rgb(239,60,40)"/><text x="11.7885%" y="239.50">ttt_ab_vs_ab`hash..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 7.69%)</title><rect x="15.3846%" y="213" width="7.6923%" height="15" fill="rgb(206,27,48)"/><text x="15.6346%" y="223.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 7.69%)</title><rect x="15.3846%" y="197" width="7.6923%" height="15" fill="rgb(225,35,8)"/><text x="15.6346%" y="207.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::sse2::Group::match_empty (1 samples, 3.85%)</title><rect x="19.2308%" y="181" width="3.8462%" height="15" fill="rgb(250,213,24)"/><text x="19.4808%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::sse2::Group::match_byte (1 samples, 3.85%)</title><rect x="19.2308%" y="165" width="3.8462%" height="15" fill="rgb(247,123,22)"/><text x="19.4808%" y="175.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 3.85%)</title><rect x="19.2308%" y="149" width="3.8462%" height="15" fill="rgb(231,138,38)"/><text x="19.4808%" y="159.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::iter::traits::iterator::Iterator::collect (1 samples, 3.85%)</title><rect x="23.0769%" y="357" width="3.8462%" height="15" fill="rgb(231,145,46)"/><text x="23.3269%" y="367.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="23.0769%" y="341" width="3.8462%" height="15" fill="rgb(251,118,11)"/><text x="23.3269%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="23.0769%" y="325" width="3.8462%" height="15" fill="rgb(217,147,25)"/><text x="23.3269%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="23.0769%" y="309" width="3.8462%" height="15" fill="rgb(247,81,37)"/><text x="23.3269%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.85%)</title><rect x="23.0769%" y="293" width="3.8462%" height="15" fill="rgb(209,12,38)"/><text x="23.3269%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 3.85%)</title><rect x="23.0769%" y="277" width="3.8462%" height="15" fill="rgb(227,1,9)"/><text x="23.3269%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.85%)</title><rect x="23.0769%" y="261" width="3.8462%" height="15" fill="rgb(248,47,43)"/><text x="23.3269%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;tictactoe::board::actions::Actions as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.85%)</title><rect x="23.0769%" y="245" width="3.8462%" height="15" fill="rgb(221,10,30)"/><text x="23.3269%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 3.85%)</title><rect x="26.9231%" y="341" width="3.8462%" height="15" fill="rgb(210,229,1)"/><text x="27.1731%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 3.85%)</title><rect x="26.9231%" y="325" width="3.8462%" height="15" fill="rgb(222,148,37)"/><text x="27.1731%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 3.85%)</title><rect x="26.9231%" y="309" width="3.8462%" height="15" fill="rgb(234,67,33)"/><text x="27.1731%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 3.85%)</title><rect x="26.9231%" y="293" width="3.8462%" height="15" fill="rgb(247,98,35)"/><text x="27.1731%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by (1 samples, 3.85%)</title><rect x="30.7692%" y="341" width="3.8462%" height="15" fill="rgb(247,138,52)"/><text x="31.0192%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::merge_sort (1 samples, 3.85%)</title><rect x="30.7692%" y="325" width="3.8462%" height="15" fill="rgb(213,79,30)"/><text x="31.0192%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::insert_head (1 samples, 3.85%)</title><rect x="30.7692%" y="309" width="3.8462%" height="15" fill="rgb(246,177,23)"/><text x="31.0192%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1 samples, 3.85%)</title><rect x="30.7692%" y="293" width="3.8462%" height="15" fill="rgb(230,62,27)"/><text x="31.0192%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta::_{{closure}} (1 samples, 3.85%)</title><rect x="30.7692%" y="277" width="3.8462%" height="15" fill="rgb(216,154,8)"/><text x="31.0192%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::sort_by_score (1 samples, 3.85%)</title><rect x="30.7692%" y="261" width="3.8462%" height="15" fill="rgb(244,35,45)"/><text x="31.0192%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::option::Option&lt;T&gt;::unwrap (1 samples, 3.85%)</title><rect x="30.7692%" y="245" width="3.8462%" height="15" fill="rgb(251,115,12)"/><text x="31.0192%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::iter::traits::iterator::Iterator::collect (1 samples, 3.85%)</title><rect x="34.6154%" y="341" width="3.8462%" height="15" fill="rgb(240,54,50)"/><text x="34.8654%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="34.6154%" y="325" width="3.8462%" height="15" fill="rgb(233,84,52)"/><text x="34.8654%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="34.6154%" y="309" width="3.8462%" height="15" fill="rgb(207,117,47)"/><text x="34.8654%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="34.6154%" y="293" width="3.8462%" height="15" fill="rgb(249,43,39)"/><text x="34.8654%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.85%)</title><rect x="34.6154%" y="277" width="3.8462%" height="15" fill="rgb(209,38,44)"/><text x="34.8654%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 3.85%)</title><rect x="34.6154%" y="261" width="3.8462%" height="15" fill="rgb(236,212,23)"/><text x="34.8654%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 3.85%)</title><rect x="34.6154%" y="245" width="3.8462%" height="15" fill="rgb(242,79,21)"/><text x="34.8654%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 3.85%)</title><rect x="34.6154%" y="229" width="3.8462%" height="15" fill="rgb(211,96,35)"/><text x="34.8654%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 3.85%)</title><rect x="34.6154%" y="213" width="3.8462%" height="15" fill="rgb(253,215,40)"/><text x="34.8654%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 3.85%)</title><rect x="34.6154%" y="197" width="3.8462%" height="15" fill="rgb(211,81,21)"/><text x="34.8654%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::raw_vec::finish_grow (1 samples, 3.85%)</title><rect x="34.6154%" y="181" width="3.8462%" height="15" fill="rgb(208,190,38)"/><text x="34.8654%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::result::Result&lt;T,E&gt;::map_err (1 samples, 3.85%)</title><rect x="34.6154%" y="165" width="3.8462%" height="15" fill="rgb(235,213,38)"/><text x="34.8654%" y="175.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (1 samples, 3.85%)</title><rect x="38.4615%" y="229" width="3.8462%" height="15" fill="rgb(237,122,38)"/><text x="38.7115%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 3.85%)</title><rect x="42.3077%" y="165" width="3.8462%" height="15" fill="rgb(244,218,35)"/><text x="42.5577%" y="175.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 3.85%)</title><rect x="42.3077%" y="149" width="3.8462%" height="15" fill="rgb(240,68,47)"/><text x="42.5577%" y="159.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (1 samples, 3.85%)</title><rect x="42.3077%" y="133" width="3.8462%" height="15" fill="rgb(210,16,53)"/><text x="42.5577%" y="143.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::num::_&lt;impl isize&gt;::wrapping_neg (1 samples, 3.85%)</title><rect x="42.3077%" y="117" width="3.8462%" height="15" fill="rgb(235,124,12)"/><text x="42.5577%" y="127.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::num::_&lt;impl isize&gt;::overflowing_neg (1 samples, 3.85%)</title><rect x="42.3077%" y="101" width="3.8462%" height="15" fill="rgb(224,169,11)"/><text x="42.5577%" y="111.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by (3 samples, 11.54%)</title><rect x="38.4615%" y="325" width="11.5385%" height="15" fill="rgb(250,166,2)"/><text x="38.7115%" y="335.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::merge_sort (3 samples, 11.54%)</title><rect x="38.4615%" y="309" width="11.5385%" height="15" fill="rgb(242,216,29)"/><text x="38.7115%" y="319.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::insert_head (3 samples, 11.54%)</title><rect x="38.4615%" y="293" width="11.5385%" height="15" fill="rgb(230,116,27)"/><text x="38.7115%" y="303.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3 samples, 11.54%)</title><rect x="38.4615%" y="277" width="11.5385%" height="15" fill="rgb(228,99,48)"/><text x="38.7115%" y="287.50">ttt_ab_vs_ab`allo..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta::_{{closure}} (3 samples, 11.54%)</title><rect x="38.4615%" y="261" width="11.5385%" height="15" fill="rgb(253,11,6)"/><text x="38.7115%" y="271.50">ttt_ab_vs_ab`gts:..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::sort_by_score (3 samples, 11.54%)</title><rect x="38.4615%" y="245" width="11.5385%" height="15" fill="rgb(247,143,39)"/><text x="38.7115%" y="255.50">ttt_ab_vs_ab`gts:..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 7.69%)</title><rect x="42.3077%" y="229" width="7.6923%" height="15" fill="rgb(236,97,10)"/><text x="42.5577%" y="239.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (2 samples, 7.69%)</title><rect x="42.3077%" y="213" width="7.6923%" height="15" fill="rgb(233,208,19)"/><text x="42.5577%" y="223.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (2 samples, 7.69%)</title><rect x="42.3077%" y="197" width="7.6923%" height="15" fill="rgb(216,164,2)"/><text x="42.5577%" y="207.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 7.69%)</title><rect x="42.3077%" y="181" width="7.6923%" height="15" fill="rgb(220,129,5)"/><text x="42.5577%" y="191.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 3.85%)</title><rect x="46.1538%" y="165" width="3.8462%" height="15" fill="rgb(242,17,10)"/><text x="46.4038%" y="175.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 3.85%)</title><rect x="46.1538%" y="149" width="3.8462%" height="15" fill="rgb(242,107,0)"/><text x="46.4038%" y="159.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::sse2::Group::match_byte (1 samples, 3.85%)</title><rect x="46.1538%" y="133" width="3.8462%" height="15" fill="rgb(251,28,31)"/><text x="46.4038%" y="143.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::iter::traits::iterator::Iterator::collect (1 samples, 3.85%)</title><rect x="50.0000%" y="309" width="3.8462%" height="15" fill="rgb(233,223,10)"/><text x="50.2500%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="50.0000%" y="293" width="3.8462%" height="15" fill="rgb(215,21,27)"/><text x="50.2500%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="50.0000%" y="277" width="3.8462%" height="15" fill="rgb(232,23,21)"/><text x="50.2500%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.85%)</title><rect x="50.0000%" y="261" width="3.8462%" height="15" fill="rgb(244,5,23)"/><text x="50.2500%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.85%)</title><rect x="50.0000%" y="245" width="3.8462%" height="15" fill="rgb(226,81,46)"/><text x="50.2500%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 3.85%)</title><rect x="50.0000%" y="229" width="3.8462%" height="15" fill="rgb(247,70,30)"/><text x="50.2500%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::num::_&lt;impl usize&gt;::saturating_add (1 samples, 3.85%)</title><rect x="50.0000%" y="213" width="3.8462%" height="15" fill="rgb(212,68,19)"/><text x="50.2500%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 3.85%)</title><rect x="53.8462%" y="293" width="3.8462%" height="15" fill="rgb(240,187,13)"/><text x="54.0962%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 3.85%)</title><rect x="53.8462%" y="277" width="3.8462%" height="15" fill="rgb(223,113,26)"/><text x="54.0962%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 3.85%)</title><rect x="53.8462%" y="261" width="3.8462%" height="15" fill="rgb(206,192,2)"/><text x="54.0962%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (1 samples, 3.85%)</title><rect x="53.8462%" y="245" width="3.8462%" height="15" fill="rgb(241,108,4)"/><text x="54.0962%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="53.8462%" y="229" width="3.8462%" height="15" fill="rgb(247,173,49)"/><text x="54.0962%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="53.8462%" y="213" width="3.8462%" height="15" fill="rgb(224,114,35)"/><text x="54.0962%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="53.8462%" y="197" width="3.8462%" height="15" fill="rgb(245,159,27)"/><text x="54.0962%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 3.85%)</title><rect x="53.8462%" y="181" width="3.8462%" height="15" fill="rgb(245,172,44)"/><text x="54.0962%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (2 samples, 7.69%)</title><rect x="53.8462%" y="309" width="7.6923%" height="15" fill="rgb(236,23,11)"/><text x="54.0962%" y="319.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`tictactoe::board::environment::_&lt;impl gts::abstractions::environment::Environment&lt;u8,tictactoe::agentid::AgentId&gt; for tictactoe::board::Board&gt;::valid_actions (1 samples, 3.85%)</title><rect x="57.6923%" y="293" width="3.8462%" height="15" fill="rgb(205,117,38)"/><text x="57.9423%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`tictactoe::board::actions::Actions::new (1 samples, 3.85%)</title><rect x="57.6923%" y="277" width="3.8462%" height="15" fill="rgb(237,72,25)"/><text x="57.9423%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`tictactoe::board::environment::_&lt;impl gts::abstractions::environment::Environment&lt;u8,tictactoe::agentid::AgentId&gt; for tictactoe::board::Board&gt;::is_terminal (1 samples, 3.85%)</title><rect x="57.6923%" y="261" width="3.8462%" height="15" fill="rgb(244,70,9)"/><text x="57.9423%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`tictactoe::board::utils::is_winning (1 samples, 3.85%)</title><rect x="57.6923%" y="245" width="3.8462%" height="15" fill="rgb(217,125,39)"/><text x="57.9423%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::array::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T (1 samples, 3.85%)</title><rect x="57.6923%" y="229" width="3.8462%" height="15" fill="rgb(235,36,10)"/><text x="57.9423%" y="239.50">ttt_..</text></g><g><title> N]&gt;::into_iter (1 samples, 3.85%)</title><rect x="57.6923%" y="213" width="3.8462%" height="15" fill="rgb(251,123,47)"/><text x="57.9423%" y="223.50"> N]&gt;..</text></g><g><title>ttt_ab_vs_ab`core::slice::_&lt;impl [T]&gt;::iter (1 samples, 3.85%)</title><rect x="57.6923%" y="197" width="3.8462%" height="15" fill="rgb(221,13,13)"/><text x="57.9423%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::slice::iter::Iter&lt;T&gt;::new (1 samples, 3.85%)</title><rect x="57.6923%" y="181" width="3.8462%" height="15" fill="rgb(238,131,9)"/><text x="57.9423%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (4 samples, 15.38%)</title><rect x="50.0000%" y="325" width="15.3846%" height="15" fill="rgb(211,50,8)"/><text x="50.2500%" y="335.50">ttt_ab_vs_ab`gts::tree_s..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 3.85%)</title><rect x="61.5385%" y="309" width="3.8462%" height="15" fill="rgb(245,182,24)"/><text x="61.7885%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 3.85%)</title><rect x="61.5385%" y="293" width="3.8462%" height="15" fill="rgb(242,14,37)"/><text x="61.7885%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 3.85%)</title><rect x="61.5385%" y="277" width="3.8462%" height="15" fill="rgb(246,228,12)"/><text x="61.7885%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.85%)</title><rect x="61.5385%" y="261" width="3.8462%" height="15" fill="rgb(213,55,15)"/><text x="61.7885%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::ctrl (1 samples, 3.85%)</title><rect x="61.5385%" y="245" width="3.8462%" height="15" fill="rgb(209,9,3)"/><text x="61.7885%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (3 samples, 11.54%)</title><rect x="65.3846%" y="277" width="11.5385%" height="15" fill="rgb(230,59,30)"/><text x="65.6346%" y="287.50">ttt_ab_vs_ab`hash..</text></g><g><title>ttt_ab_vs_ab`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 11.54%)</title><rect x="65.3846%" y="261" width="11.5385%" height="15" fill="rgb(209,121,21)"/><text x="65.6346%" y="271.50">ttt_ab_vs_ab`&lt;std..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 11.54%)</title><rect x="65.3846%" y="245" width="11.5385%" height="15" fill="rgb(220,109,13)"/><text x="65.6346%" y="255.50">ttt_ab_vs_ab`&lt;cor..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 7.69%)</title><rect x="69.2308%" y="229" width="7.6923%" height="15" fill="rgb(232,18,1)"/><text x="69.4808%" y="239.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 7.69%)</title><rect x="69.2308%" y="213" width="7.6923%" height="15" fill="rgb(215,41,42)"/><text x="69.4808%" y="223.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 15.38%)</title><rect x="65.3846%" y="325" width="15.3846%" height="15" fill="rgb(224,123,36)"/><text x="65.6346%" y="335.50">ttt_ab_vs_ab`std::collec..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (4 samples, 15.38%)</title><rect x="65.3846%" y="309" width="15.3846%" height="15" fill="rgb(240,125,3)"/><text x="65.6346%" y="319.50">ttt_ab_vs_ab`hashbrown::..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (4 samples, 15.38%)</title><rect x="65.3846%" y="293" width="15.3846%" height="15" fill="rgb(205,98,50)"/><text x="65.6346%" y="303.50">ttt_ab_vs_ab`hashbrown::..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 3.85%)</title><rect x="76.9231%" y="277" width="3.8462%" height="15" fill="rgb(205,185,37)"/><text x="77.1731%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 3.85%)</title><rect x="76.9231%" y="261" width="3.8462%" height="15" fill="rgb(238,207,15)"/><text x="77.1731%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 3.85%)</title><rect x="76.9231%" y="245" width="3.8462%" height="15" fill="rgb(213,199,42)"/><text x="77.1731%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::sse2::Group::match_byte (1 samples, 3.85%)</title><rect x="76.9231%" y="229" width="3.8462%" height="15" fill="rgb(235,201,11)"/><text x="77.1731%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 3.85%)</title><rect x="76.9231%" y="213" width="3.8462%" height="15" fill="rgb(207,46,11)"/><text x="77.1731%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 3.85%)</title><rect x="76.9231%" y="197" width="3.8462%" height="15" fill="rgb(241,35,35)"/><text x="77.1731%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 3.85%)</title><rect x="80.7692%" y="325" width="3.8462%" height="15" fill="rgb(243,32,47)"/><text x="81.0192%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 3.85%)</title><rect x="80.7692%" y="309" width="3.8462%" height="15" fill="rgb(247,202,23)"/><text x="81.0192%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 3.85%)</title><rect x="80.7692%" y="293" width="3.8462%" height="15" fill="rgb(219,102,11)"/><text x="81.0192%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 3.85%)</title><rect x="80.7692%" y="277" width="3.8462%" height="15" fill="rgb(243,110,44)"/><text x="81.0192%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 3.85%)</title><rect x="80.7692%" y="261" width="3.8462%" height="15" fill="rgb(222,74,54)"/><text x="81.0192%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::sse2::Group::match_byte (1 samples, 3.85%)</title><rect x="80.7692%" y="245" width="3.8462%" height="15" fill="rgb(216,99,12)"/><text x="81.0192%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 3.85%)</title><rect x="80.7692%" y="229" width="3.8462%" height="15" fill="rgb(226,22,26)"/><text x="81.0192%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 3.85%)</title><rect x="80.7692%" y="213" width="3.8462%" height="15" fill="rgb(217,163,10)"/><text x="81.0192%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (13 samples, 50.00%)</title><rect x="38.4615%" y="341" width="50.0000%" height="15" fill="rgb(213,25,53)"/><text x="38.7115%" y="351.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`tictactoe::board::environment::_&lt;impl gts::abstractions::environment::Environment&lt;u8,tictactoe::agentid::AgentId&gt; for tictactoe::board::Board&gt;::is_terminal (1 samples, 3.85%)</title><rect x="84.6154%" y="325" width="3.8462%" height="15" fill="rgb(252,105,26)"/><text x="84.8654%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`tictactoe::board::utils::is_winning (1 samples, 3.85%)</title><rect x="84.6154%" y="309" width="3.8462%" height="15" fill="rgb(220,39,43)"/><text x="84.8654%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.85%)</title><rect x="84.6154%" y="293" width="3.8462%" height="15" fill="rgb(229,68,48)"/><text x="84.8654%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (1 samples, 3.85%)</title><rect x="84.6154%" y="277" width="3.8462%" height="15" fill="rgb(252,8,32)"/><text x="84.8654%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (1 samples, 3.85%)</title><rect x="88.4615%" y="293" width="3.8462%" height="15" fill="rgb(223,20,43)"/><text x="88.7115%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="88.4615%" y="277" width="3.8462%" height="15" fill="rgb(229,81,49)"/><text x="88.7115%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="88.4615%" y="261" width="3.8462%" height="15" fill="rgb(236,28,36)"/><text x="88.7115%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="88.4615%" y="245" width="3.8462%" height="15" fill="rgb(249,185,26)"/><text x="88.7115%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 3.85%)</title><rect x="88.4615%" y="229" width="3.8462%" height="15" fill="rgb(249,174,33)"/><text x="88.7115%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 7.69%)</title><rect x="88.4615%" y="341" width="7.6923%" height="15" fill="rgb(233,201,37)"/><text x="88.7115%" y="351.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get (2 samples, 7.69%)</title><rect x="88.4615%" y="325" width="7.6923%" height="15" fill="rgb(221,78,26)"/><text x="88.7115%" y="335.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (2 samples, 7.69%)</title><rect x="88.4615%" y="309" width="7.6923%" height="15" fill="rgb(250,127,30)"/><text x="88.7115%" y="319.50">ttt_ab_vs_a..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 3.85%)</title><rect x="92.3077%" y="293" width="3.8462%" height="15" fill="rgb(230,49,44)"/><text x="92.5577%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 3.85%)</title><rect x="92.3077%" y="277" width="3.8462%" height="15" fill="rgb(229,67,23)"/><text x="92.5577%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 3.85%)</title><rect x="92.3077%" y="261" width="3.8462%" height="15" fill="rgb(249,83,47)"/><text x="92.5577%" y="271.50">ttt_..</text></g><g><title>all (26 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="639.50"></text></g><g><title>ttt_ab_vs_ab`0x1 (25 samples, 96.15%)</title><rect x="3.8462%" y="613" width="96.1538%" height="15" fill="rgb(238,154,13)"/><text x="4.0962%" y="623.50">ttt_ab_vs_ab`0x1</text></g><g><title>libdyld.dylib`start (25 samples, 96.15%)</title><rect x="3.8462%" y="597" width="96.1538%" height="15" fill="rgb(219,56,2)"/><text x="4.0962%" y="607.50">libdyld.dylib`start</text></g><g><title>ttt_ab_vs_ab`main (25 samples, 96.15%)</title><rect x="3.8462%" y="581" width="96.1538%" height="15" fill="rgb(233,0,4)"/><text x="4.0962%" y="591.50">ttt_ab_vs_ab`main</text></g><g><title>ttt_ab_vs_ab`std::rt::lang_start (25 samples, 96.15%)</title><rect x="3.8462%" y="565" width="96.1538%" height="15" fill="rgb(235,30,7)"/><text x="4.0962%" y="575.50">ttt_ab_vs_ab`std::rt::lang_start</text></g><g><title>ttt_ab_vs_ab`std::rt::lang_start_internal (25 samples, 96.15%)</title><rect x="3.8462%" y="549" width="96.1538%" height="15" fill="rgb(250,79,13)"/><text x="4.0962%" y="559.50">ttt_ab_vs_ab`std::rt::lang_start_internal</text></g><g><title>ttt_ab_vs_ab`std::rt::lang_start::_{{closure}} (25 samples, 96.15%)</title><rect x="3.8462%" y="533" width="96.1538%" height="15" fill="rgb(211,146,34)"/><text x="4.0962%" y="543.50">ttt_ab_vs_ab`std::rt::lang_start::_{{closure}}</text></g><g><title>ttt_ab_vs_ab`std::sys_common::backtrace::__rust_begin_short_backtrace (25 samples, 96.15%)</title><rect x="3.8462%" y="517" width="96.1538%" height="15" fill="rgb(228,22,38)"/><text x="4.0962%" y="527.50">ttt_ab_vs_ab`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ttt_ab_vs_ab`core::ops::function::FnOnce::call_once (25 samples, 96.15%)</title><rect x="3.8462%" y="501" width="96.1538%" height="15" fill="rgb(235,168,5)"/><text x="4.0962%" y="511.50">ttt_ab_vs_ab`core::ops::function::FnOnce::call_once</text></g><g><title>ttt_ab_vs_ab`ttt_ab_vs_ab::main (25 samples, 96.15%)</title><rect x="3.8462%" y="485" width="96.1538%" height="15" fill="rgb(221,155,16)"/><text x="4.0962%" y="495.50">ttt_ab_vs_ab`ttt_ab_vs_ab::main</text></g><g><title>ttt_ab_vs_ab`gts::abstractions::play::play (25 samples, 96.15%)</title><rect x="3.8462%" y="469" width="96.1538%" height="15" fill="rgb(215,215,53)"/><text x="4.0962%" y="479.50">ttt_ab_vs_ab`gts::abstractions::play::play</text></g><g><title>ttt_ab_vs_ab`&lt;gts::agents::alphabeta_agent::AlphabetaAgent&lt;Action,AgentId,T&gt; as gts::abstractions::agent::Agent&lt;Action,AgentId,T&gt;&gt;::action (25 samples, 96.15%)</title><rect x="3.8462%" y="453" width="96.1538%" height="15" fill="rgb(223,4,10)"/><text x="4.0962%" y="463.50">ttt_ab_vs_ab`&lt;gts::agents::alphabeta_agent::AlphabetaAgent&lt;Action,AgentId,T&gt; as gts::abstractions::agent::Agent&lt;Action,AgentId,T&gt;&gt;::action</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (25 samples, 96.15%)</title><rect x="3.8462%" y="437" width="96.1538%" height="15" fill="rgb(234,103,6)"/><text x="4.0962%" y="447.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (25 samples, 96.15%)</title><rect x="3.8462%" y="421" width="96.1538%" height="15" fill="rgb(227,97,0)"/><text x="4.0962%" y="431.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (25 samples, 96.15%)</title><rect x="3.8462%" y="405" width="96.1538%" height="15" fill="rgb(234,150,53)"/><text x="4.0962%" y="415.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (24 samples, 92.31%)</title><rect x="7.6923%" y="389" width="92.3077%" height="15" fill="rgb(228,201,54)"/><text x="7.9423%" y="399.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (23 samples, 88.46%)</title><rect x="11.5385%" y="373" width="88.4615%" height="15" fill="rgb(222,22,37)"/><text x="11.7885%" y="383.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta (19 samples, 73.08%)</title><rect x="26.9231%" y="357" width="73.0769%" height="15" fill="rgb(237,53,32)"/><text x="27.1731%" y="367.50">ttt_ab_vs_ab`gts::tree_search::alphabeta::alphabeta</text></g><g><title>ttt_ab_vs_ab`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 3.85%)</title><rect x="96.1538%" y="341" width="3.8462%" height="15" fill="rgb(233,25,53)"/><text x="96.4038%" y="351.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 3.85%)</title><rect x="96.1538%" y="325" width="3.8462%" height="15" fill="rgb(210,40,34)"/><text x="96.4038%" y="335.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 3.85%)</title><rect x="96.1538%" y="309" width="3.8462%" height="15" fill="rgb(241,220,44)"/><text x="96.4038%" y="319.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::reserve (1 samples, 3.85%)</title><rect x="96.1538%" y="293" width="3.8462%" height="15" fill="rgb(235,28,35)"/><text x="96.4038%" y="303.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 3.85%)</title><rect x="96.1538%" y="277" width="3.8462%" height="15" fill="rgb(210,56,17)"/><text x="96.4038%" y="287.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::raw::RawTable&lt;T&gt;::resize (1 samples, 3.85%)</title><rect x="96.1538%" y="261" width="3.8462%" height="15" fill="rgb(224,130,29)"/><text x="96.4038%" y="271.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (1 samples, 3.85%)</title><rect x="96.1538%" y="245" width="3.8462%" height="15" fill="rgb(235,212,8)"/><text x="96.4038%" y="255.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`hashbrown::map::make_hash (1 samples, 3.85%)</title><rect x="96.1538%" y="229" width="3.8462%" height="15" fill="rgb(223,33,50)"/><text x="96.4038%" y="239.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="96.1538%" y="213" width="3.8462%" height="15" fill="rgb(219,149,13)"/><text x="96.4038%" y="223.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="96.1538%" y="197" width="3.8462%" height="15" fill="rgb(250,156,29)"/><text x="96.4038%" y="207.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 3.85%)</title><rect x="96.1538%" y="181" width="3.8462%" height="15" fill="rgb(216,193,19)"/><text x="96.4038%" y="191.50">ttt_..</text></g><g><title>ttt_ab_vs_ab`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 3.85%)</title><rect x="96.1538%" y="165" width="3.8462%" height="15" fill="rgb(216,135,14)"/><text x="96.4038%" y="175.50">ttt_..</text></g></svg></svg>